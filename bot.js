const TelegramBot = require('node-telegram-bot-api');
const { CronJob } = require('cron');
const https = require('https');
const {
  TELEGRAM_BOT_TOKEN,
  DAILY_PIDOR_HOUR,
  PROBABILITY_MULTIPLIER
} = require('./config');
const database = require('./database');

class PidorBot {
  constructor() {
    this.bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
      polling: {
        interval: 2000,
        autoStart: true,
        params: {
          timeout: 20
        }
      },
      request: {
        agent: new https.Agent({
          rejectUnauthorized: false
        })
      }
    });

    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
      setTimeout(() => {
        try {
          this.bot.stopPolling();
          this.bot.startPolling();
        } catch (restartError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', restartError);
        }
      }, 5000);
    });

    this.setupCommands();
    this.setupScheduledTasks();
  }

  setupCommands() {
    this.bot.onText(/\/pidortoday/, (msg) => this.handlePidorToday(msg));
    this.bot.onText(/\/pidorstats/, (msg) => this.handlePidorStats(msg));
    this.bot.onText(/\/choosepidor/, (msg) => this.chooseDailyPidor(msg.chat.id));
  }

  setupScheduledTasks() {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–∏–¥–æ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    new CronJob(`0 ${DAILY_PIDOR_HOUR} * * *`, () => {
      this.chooseDailyPidor();
    }, null, true);
  }

  handlePidorStats(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const users = db.users || {};

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStats = Object.values(users)
      .map(user => ({
        username: user.username,
        count: user.pidorCount || 0
      }))
      .filter(user => user.count > 0)
      .sort((a, b) => b.count - a.count);

    if (userStats.length > 0) {
      const statMessage = userStats
        .map((user, index) => {
          let emoji = '';
          switch (index) {
            case 0: emoji = 'ü•á'; break;
            case 1: emoji = 'ü•à'; break;
            case 2: emoji = 'ü•â'; break;
            default: emoji = 'üèÖ';
          }
          return `${emoji} ${index + 1}. ${user.username}: ${user.count} —Ä–∞–∑`;
        })
        .join('\n');

      this.bot.sendMessage(chatId, `üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∏–¥–æ—Ä–æ–≤:\n\n${statMessage}`);
    } else {
      this.bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ü§î');
    }
  }

  chooseDailyPidor(chatId = null) {
    const db = database.readDatabase();
    const users = Object.entries(db.users || {});

    if (users.length === 0) {
      if (chatId) this.bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –ø–∏–¥–æ—Ä —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const someoneChosen = users.some(([_, user]) => user.lastPidorDate === today);

    if (someoneChosen) {
      if (chatId) {
        const todaysPidor = users.find(([_, user]) => user.lastPidorDate === today);
        this.bot.sendMessage(chatId, `–ü–∏–¥–æ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω: ${todaysPidor[1].username} (@${todaysPidor[1].telegramUsername}) üèÜ`);
      }
      return;
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const randomIndex = Math.floor(Math.random() * users.length);
    const [userId, user] = users[randomIndex];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user.pidorCount = (user.pidorCount || 0) + 1;
    user.lastPidorDate = today;

    database.writeDatabase(db);

    const message = `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ü–ò–î–û–† –¥–Ω—è: ${user.username} (@${user.telegramUsername})! ü§™`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (chatId) {
      this.bot.sendMessage(chatId, message);
    }
  }

  handlePidorToday(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const today = new Date().toISOString().split('T')[0];

    const todaysPidor = Object.values(db.users || {})
      .find(user => user.lastPidorDate === today);

    if (todaysPidor) {
      this.bot.sendMessage(chatId, `–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–∏–¥–æ—Ä –¥–Ω—è: ${todaysPidor.username} (@${todaysPidor.telegramUsername}) üèÜ`);
    } else {
      this.bot.sendMessage(chatId, '–ü–∏–¥–æ—Ä –¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω ü§î');
    }
  }
}

module.exports = new PidorBot();