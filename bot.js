const TelegramBot = require('node-telegram-bot-api');
const { CronJob } = require('cron');
const https = require('https');
const {
  TELEGRAM_BOT_TOKEN,
  DAILY_PIDOR_HOUR,
  PROBABILITY_MULTIPLIER
} = require('./config');
const database = require('./database');

class PidorBot {
  constructor() {
    this.bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
      polling: {
        interval: 2000,
        autoStart: true,
        params: {
          timeout: 20
        }
      },
      request: {
        agent: new https.Agent({
          rejectUnauthorized: false
        })
      }
    });

    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
      setTimeout(() => {
        try {
          this.bot.stopPolling();
          this.bot.startPolling();
        } catch (restartError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', restartError);
        }
      }, 5000);
    });

    this.setupCommands();
    this.setupScheduledTasks();
  }

  setupCommands() {
    this.bot.onText(/\/pidortoday/, (msg) => this.handlePidorToday(msg));
    this.bot.onText(/\/pidormonth/, (msg) => this.handlePidorMonth(msg));
    this.bot.onText(/\/pidoryear/, (msg) => this.handlePidorYear(msg));
    this.bot.onText(/\/choosepidor/, (msg) => this.manualChoosePidor(msg));
    this.bot.onText(/\/pidorstats/, (msg) => this.handlePidorStats(msg));
    this.bot.on('new_chat_members', (msg) => this.handleNewChatMembers(msg));
  }

  setupScheduledTasks() {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–∏–¥–æ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    new CronJob(`0 ${DAILY_PIDOR_HOUR} * * *`, () => {
      this.chooseDailyPidor();
    }, null, true);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –ø–∏–¥–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
    new CronJob('0 */12 * * *', () => {
      this.checkAndResetDailyPidor();
    }, null, true);
  }

  handlePidorStats(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const users = db.users || {};

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStats = Object.entries(users)
      .map(([userId, userData]) => {
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –∏–∑ –º–µ—Å—è—á–Ω–æ–π –∏ –≥–æ–¥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const monthPidors = (db.monthPidors || [])
          .filter(p => p.userId === userId);

        return {
          userId,
          username: userData.username,
          count: monthPidors.reduce((sum, pidor) => sum + pidor.count, 0)
        };
      })
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø–∞–¥–∞–Ω–∏–π
      .sort((a, b) => b.count - a.count)
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –±—ã–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è
      .filter(user => user.count > 0);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    if (userStats.length > 0) {
      const statMessage = userStats
        .map((user, index) => {
          let emoji = '';
          switch (index) {
            case 0: emoji = 'ü•á'; break;
            case 1: emoji = 'ü•à'; break;
            case 2: emoji = 'ü•â'; break;
            default: emoji = 'üèÖ';
          }
          return `${emoji} ${index + 1}. ${user.username}: ${user.count} —Ä–∞–∑`;
        })
        .join('\n');

      this.bot.sendMessage(chatId, `üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∏–¥–æ—Ä–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n\n${statMessage}`, {
        parse_mode: 'Markdown'
      });
    } else {
      this.bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ü§î');
    }
  }

  handleNewChatMembers(msg) {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É
    const botAdded = msg.new_chat_members.some(member => member.is_bot && member.username === 'Piiiddor_bot');

    if (botAdded) {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
      this.collectGroupMembers(chatId);
    }
  }

  async collectGroupMembers(chatId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
      const botChatMember = await this.bot.getChatMember(chatId, this.bot.botInfo.id);

      if (!['administrator', 'creator'].includes(botChatMember.status)) {
        this.bot.sendMessage(chatId, '‚ùå –î–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
      const membersCount = await this.bot.getChatMembersCount(chatId);

      // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const usersToRegister = [];

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã
      for (let offset = 0; offset < membersCount; offset += 200) {
        const members = await this.bot.getChatMembers(chatId, {
          offset: offset,
          limit: 200
        });

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        const filteredMembers = members
          .filter(member =>
            member.status !== 'left' &&
            member.status !== 'kicked' &&
            !member.user.is_bot
          )
          .map(member => ({
            userId: member.user.id,
            username: member.user.username || member.user.first_name || 'Unknown',
            firstName: member.user.first_name,
            lastName: member.user.last_name,
            status: member.status
          }));

        usersToRegister.push(...filteredMembers);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      const chatInfo = await this.bot.getChat(chatId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const db = database.readDatabase();
      if (!db.users) db.users = {};
      if (!db.chats) db.chats = {};

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      db.chats[chatId] = {
        title: chatInfo.title,
        type: chatInfo.type,
        membersCount: membersCount,
        registeredAt: new Date().toISOString()
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      usersToRegister.forEach(user => {
        db.users[user.userId] = {
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          memberStatus: user.status,
          lastPidorDate: null,
          registeredAt: new Date().toISOString()
        };
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      database.writeDatabase(db);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.bot.sendMessage(chatId, `‚úÖ –°–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ${usersToRegister.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã!\n\nüìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${membersCount}`);

      return usersToRegister;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:', error);

      // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      if (error.response && error.response.statusCode === 403) {
        this.bot.sendMessage(chatId, '‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      } else {
        this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã.');
      }

      return [];
    }
  }

  manualChoosePidor(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏–¥–æ—Ä–∞
    if (this.canChoosePidor(db)) {
      this.chooseDailyPidor(chatId);
    } else {
      const remainingTime = this.calculateRemainingTime(db);
      this.bot.sendMessage(chatId, `üïí –°–ª–µ–¥—É—é—â–∏–π –ø–∏–¥–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ ${remainingTime}`);
    }
  }

  canChoosePidor(db) {
    if (!db.todayPidor) return true;

    const lastPidorTime = new Date(db.todayPidor.timestamp);
    const currentTime = new Date();
    const timeDiff = (currentTime - lastPidorTime) / (1000 * 60 * 60); // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö

    return timeDiff >= 12;
  }

  calculateRemainingTime(db) {
    if (!db.todayPidor) return '0 —á–∞—Å–æ–≤';

    const lastPidorTime = new Date(db.todayPidor.timestamp);
    const nextPossibleTime = new Date(lastPidorTime.getTime() + 12 * 60 * 60 * 1000);
    const currentTime = new Date();

    const remainingHours = Math.ceil((nextPossibleTime - currentTime) / (1000 * 60 * 60));
    return `${remainingHours} —á–∞—Å–æ–≤`;
  }

  chooseDailyPidor(chatId = null) {
    const db = database.readDatabase();
    const userIds = Object.keys(db.users);

    if (userIds.length === 0) {
      if (chatId) this.bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –ê–ª–≥–æ—Ä–∏—Ç–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    const weightedUsers = userIds.map(userId => {
      const user = db.users[userId];
      let weight = 1;

      if (user.lastPidorDate) {
        const daysSinceLastPidor = (Date.now() - new Date(user.lastPidorDate).getTime()) / (1000 * 60 * 60 * 24);
        weight *= Math.pow(PROBABILITY_MULTIPLIER, daysSinceLastPidor);
      }

      return { userId, weight };
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
    const totalWeight = weightedUsers.reduce((sum, user) => sum + user.weight, 0);
    const normalizedUsers = weightedUsers.map(user => ({
      ...user,
      normalizedWeight: user.weight / totalWeight
    }));

    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    let randomValue = Math.random();
    const selectedUser = normalizedUsers.find(user => {
      randomValue -= user.normalizedWeight;
      return randomValue <= 0;
    });

    if (selectedUser) {
      const user = db.users[selectedUser.userId];
      user.lastPidorDate = new Date().toISOString();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      db.todayPidor = {
        userId: selectedUser.userId,
        username: user.username,
        timestamp: new Date().toISOString()
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é –∏ –≥–æ–¥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updatePidorStatistics(db, selectedUser.userId, user.username);

      database.writeDatabase(db);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const groupMessage = `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ü–ò–î–û–† –¥–Ω—è: @${user.username}! ü§™`;
      const personalMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–µ–≥–æ–¥–Ω—è —Ç—ã - –ü–ò–î–û–† –î–ù–Ø! üèÜ\n\n üòÑ`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
      if (chatId) {
        this.bot.sendMessage(chatId, groupMessage);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        Object.keys(db.chats || {}).forEach(chatId => {
          this.bot.sendMessage(chatId, groupMessage);
        });
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∏–¥–æ—Ä—É –¥–Ω—è
      try {
        this.bot.sendMessage(selectedUser.userId, personalMessage);
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
      }
    }
  }

  checkAndResetDailyPidor() {
    const db = database.readDatabase();

    if (db.todayPidor) {
      const lastPidorTime = new Date(db.todayPidor.timestamp);
      const currentTime = new Date();
      const timeDiff = (currentTime - lastPidorTime) / (1000 * 60 * 60); // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö

      if (timeDiff >= 12) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        delete db.todayPidor;
        database.writeDatabase(db);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏–¥–æ—Ä–∞
        this.chooseDailyPidor();
      }
    }
  }

  updatePidorStatistics(db, userId, username) {
    if (!db.monthPidors) db.monthPidors = [];
    if (!db.yearPidors) db.yearPidors = [];

    const monthPidorIndex = db.monthPidors.findIndex(p => p.userId === userId);
    const yearPidorIndex = db.yearPidors.findIndex(p => p.userId === userId);

    if (monthPidorIndex !== -1) {
      db.monthPidors[monthPidorIndex].count++;
    } else {
      db.monthPidors.push({
        userId: userId,
        username: username,
        count: 1
      });
    }

    if (yearPidorIndex !== -1) {
      db.yearPidors[yearPidorIndex].count++;
    } else {
      db.yearPidors.push({
        userId: userId,
        username: username,
        count: 1
      });
    }
  }

  handlePidorToday(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const todayPidor = db.todayPidor;

    if (todayPidor) {
      this.bot.sendMessage(chatId, `–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–∏–¥–æ—Ä –¥–Ω—è: ${todayPidor.username} üèÜ`);
    } else {
      this.bot.sendMessage(chatId, '–ü–∏–¥–æ—Ä –¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω ü§î');
    }
  }

  handlePidorMonth(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const monthPidors = db.monthPidors || [];

    if (monthPidors.length > 0) {
      const pidorsList = monthPidors.map(p => `${p.username} (${p.count} —Ä–∞–∑)`).join('\n');
      this.bot.sendMessage(chatId, `–ü–∏–¥–æ—Ä—ã –º–µ—Å—è—Ü–∞:\n${pidorsList} üèÜ`);
    } else {
      this.bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –ø–∏–¥–æ—Ä–æ–≤ –º–µ—Å—è—Ü–∞ ü§î');
    }
  }

  handlePidorYear(msg) {
    const chatId = msg.chat.id;
    const db = database.readDatabase();
    const yearPidors = db.yearPidors || [];

    if (yearPidors.length > 0) {
      const pidorsList = yearPidors.map(p => `${p.username} (${p.count} —Ä–∞–∑)`).join('\n');
      this.bot.sendMessage(chatId, `–ü–∏–¥–æ—Ä—ã –≥–æ–¥–∞:\n${pidorsList} üèÜ`);
    } else {
      this.bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –ø–∏–¥–æ—Ä–æ–≤ –≥–æ–¥–∞ ü§î');
    }
  }
}

module.exports = new PidorBot();