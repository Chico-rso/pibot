const TelegramBot = require('node-telegram-bot-api');
const { CronJob } = require('cron');
const https = require('https');
const {
    TELEGRAM_BOT_TOKEN,
    DAILY_PIDOR_HOUR,
    PROBABILITY_MULTIPLIER,
} = require('./config');
const database = require('./database');

class PidorBot {
    constructor() {
        this.bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
            polling: {
                interval: 2000,
                autoStart: true,
                params: {
                    timeout: 20,
                },
            },
            request: {
                agent: new https.Agent({
                    rejectUnauthorized: false,
                }),
            },
        });
        
        this.bot.on('polling_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
            setTimeout(() => {
                try {
                    this.bot.stopPolling();
                    this.bot.startPolling();
                } catch (restartError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', restartError);
                }
            }, 5000);
        });
        
        this.setupCommands();
        this.setupScheduledTasks();
    }
    
    setupCommands() {
        this.bot.onText(/\/pidortoday/, (msg) => this.handlePidorToday(msg));
        this.bot.onText(/\/pidorstats/, (msg) => this.handlePidorStats(msg));
        this.bot.onText(/\/choosepidor/, (msg) => this.chooseDailyPidor(msg.chat.id));
    }
    
    setupScheduledTasks() {
        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä—ã –ø–∏–¥–æ—Ä–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        new CronJob(`0 ${ DAILY_PIDOR_HOUR } * * *`, () => {
            this.chooseDailyPidor();
        }, null, true);
    }
    
    handlePidorStats(msg) {
        const chatId = msg.chat.id;
        const db = database.readDatabase();
        const users = db.users || {};
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userStats = Object.values(users)
            .map(user => ({
                username: user.username,
                count: user.pidorCount || 0,
            }))
            .filter(user => user.count > 0)
            .sort((a, b) => b.count - a.count);
        
        if (userStats.length > 0) {
            const statMessage = userStats
                .map((user, index) => {
                    let emoji = '';
                    switch (index) {
                        case 0:
                            emoji = 'ü•á';
                            break;
                        case 1:
                            emoji = 'ü•à';
                            break;
                        case 2:
                            emoji = 'ü•â';
                            break;
                        default:
                            emoji = 'üèÖ';
                    }
                    return `${ emoji } ${ index + 1 }. ${ user.username }: ${ user.count } —Ä–∞–∑`;
                })
                .join('\n');
            
            this.bot.sendMessage(chatId, `üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∏–¥–æ—Ä–æ–≤:\n\n${ statMessage }`);
        } else {
            this.bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ü§î');
        }
    }
    
    chooseDailyPidor(chatId = null) {
        const db = database.readDatabase();
        const usersEntries = Object.entries(db.users || {});
        
        if (usersEntries.length < 2) {
            if (chatId) this.bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –ø–∏–¥–æ—Ä–æ–≤.');
            return;
        }
        
        const today = new Date().toISOString().split('T')[0];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–º–æ—Ç—Ä–∏–º –ø–æ –ø–æ–ª—é lastPidorDate)
        const todaysPidors = usersEntries.filter(([_, user]) => user.lastPidorDate === today);
        
        if (todaysPidors.length >= 2) {
            const [first, second] = todaysPidors;
            this.bot.sendMessage(
                chatId,
                `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–∞—Ä–∞ –ø–∏–¥–æ—Ä–æ–≤: ${ first[1].username } (@${ first[1].telegramUsername }) –∏ ${ second[1].username } (@${ second[1].telegramUsername })! ü§™`
            );
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        const notChosen = usersEntries.filter(([_, user]) => user.lastPidorDate !== today);
        
        if (notChosen.length < 2) {
            if (chatId) this.bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –ø–∏–¥–æ—Ä–æ–≤.');
            return;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–≤—É—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω—ã n
        const getTwoDistinctIndices = (n) => {
            const first = Math.floor(Math.random() * n);
            let second;
            do {
                second = Math.floor(Math.random() * n);
            } while (second === first);
            return [first, second];
        };
        
        const [index1, index2] = getTwoDistinctIndices(notChosen.length);
        let [userId1, user1] = notChosen[index1];
        let [userId2, user2] = notChosen[index2];
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–î
        const findUserByUsername = (username) => {
            const allUsers = Object.entries(db.users || {});
            return allUsers.find(([id, user]) => user.username === username);
        };
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω AmiranBestaev, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ GTsal (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
        if (user1.username === 'AmiranBestaev') {
            const replacement = findUserByUsername('GTsal');
            // –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –≤—Ç–æ—Ä–æ–π
            if (replacement && replacement[0] !== userId2) {
                [userId1, user1] = replacement;
            }
        }
        if (user2.username === 'AmiranBestaev') {
            const replacement = findUserByUsername('GTsal');
            if (replacement && replacement[0] !== userId1) {
                [userId2, user2] = replacement;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±–æ–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1.pidorCount = (user1.pidorCount || 0) + 1;
        user2.pidorCount = (user2.pidorCount || 0) + 1;
        user1.lastPidorDate = today;
        user2.lastPidorDate = today;
        
        database.writeDatabase(db);
        
        const message = `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–∞—Ä–∞ –ø–∏–¥–æ—Ä–æ–≤: ${ user1.username } (@${ user1.telegramUsername }) –∏ ${ user2.username } (@${ user2.telegramUsername })! ü§™`;
        
        if (chatId) {
            this.bot.sendMessage(chatId, message);
        }
    }
    
    handlePidorToday(msg) {
        const chatId = msg.chat.id;
        const db = database.readDatabase();
        const today = new Date().toISOString().split('T')[0];
        
        // –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö lastPidorDate —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
        const todaysPidors = Object.values(db.users || {}).filter(user => user.lastPidorDate === today);
        
        if (todaysPidors.length >= 2) {
            const names = todaysPidors
                .map(user => `${ user.username } (@${ user.telegramUsername })`)
                .join(' –∏ ');
            this.bot.sendMessage(chatId, `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–∞—Ä–∞ –ø–∏–¥–æ—Ä–æ–≤: ${ names }!`);
        } else if (todaysPidors.length === 1) {
            const user = todaysPidors[0];
            this.bot.sendMessage(chatId, `üèÜ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–∏–¥–æ—Ä –¥–Ω—è: ${ user.username } (@${ user.telegramUsername })!`);
        } else {
            this.bot.sendMessage(chatId, '–ü–∏–¥–æ—Ä –¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω ü§î');
        }
    }
}

module.exports = new PidorBot();
